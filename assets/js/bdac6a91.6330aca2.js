"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[67188],{27710:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"cli/test","title":"Test Command","description":"Run and manage tests for ElizaOS projects and plugins","source":"@site/docs/cli/test.md","sourceDirName":"cli","slug":"/cli/test","permalink":"/docs/cli/test","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/v2-develop/packages/docs/docs/cli/test.md","tags":[],"version":"current","lastUpdatedBy":"yung algorithm","lastUpdatedAt":1747802980000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Test Command","description":"Run and manage tests for ElizaOS projects and plugins","keywords":["testing","component tests","e2e tests","Vitest","test runner","development"],"image":"/img/cli.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"Start","permalink":"/docs/cli/start"},"next":{"title":"Update","permalink":"/docs/cli/update"}}');var i=n(31085),r=n(71184);const l={sidebar_position:6,title:"Test Command",description:"Run and manage tests for ElizaOS projects and plugins",keywords:["testing","component tests","e2e tests","Vitest","test runner","development"],image:"/img/cli.jpg"},o="Test Command",a={},c=[{value:"Usage",id:"usage",level:2},{value:"Subcommands",id:"subcommands",level:2},{value:"Options",id:"options",level:2},{value:"Test Structure",id:"test-structure",level:2},{value:"Component Tests",id:"component-tests",level:3},{value:"End-to-End Tests",id:"end-to-end-tests",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Basic Test Execution",id:"basic-test-execution",level:3},{value:"Filtering Tests",id:"filtering-tests",level:3},{value:"Skipping Build",id:"skipping-build",level:3},{value:"Component Test Output",id:"component-test-output",level:2},{value:"E2E Test Output",id:"e2e-test-output",level:2},{value:"Writing Tests",id:"writing-tests",level:2},{value:"Component Tests",id:"component-tests-1",level:3},{value:"E2E Tests",id:"e2e-tests",level:3},{value:"Test Hooks for E2E Tests",id:"test-hooks-for-e2e-tests",level:2},{value:"Test Utilities",id:"test-utilities",level:2},{value:"Examples",id:"examples",level:2},{value:"Testing a Complete Project",id:"testing-a-complete-project",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Component Tests Not Found",id:"component-tests-not-found",level:3},{value:"E2E Tests Failing Due to Port Conflicts",id:"e2e-tests-failing-due-to-port-conflicts",level:3},{value:"TypeScript Errors",id:"typescript-errors",level:3},{value:"Related Commands",id:"related-commands",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"test-command",children:"Test Command"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"test"})," command allows you to run tests for your ElizaOS projects, plugins, and agents. It helps ensure your implementations work correctly before deployment."]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"elizaos test [options] [command]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"subcommands",children:"Subcommands"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Command"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"component"})}),(0,i.jsx)(t.td,{children:"Run component tests using Vitest"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"e2e"})}),(0,i.jsx)(t.td,{children:"Run end-to-end runtime tests"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"all"})}),(0,i.jsx)(t.td,{children:"Run both component and e2e tests (default)"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"-p, --port <port>"})}),(0,i.jsx)(t.td,{children:"Server port for e2e tests"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"-n, --name <name>"})}),(0,i.jsx)(t.td,{children:"Filter tests by name (matches file names or test names)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"--skip-build"})}),(0,i.jsx)(t.td,{children:"Skip building before running tests"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"test-structure",children:"Test Structure"}),"\n",(0,i.jsx)(t.p,{children:"ElizaOS tests are organized in two main categories:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Component Tests"})," (",(0,i.jsx)(t.code,{children:"__tests__/"}),"): Focused on testing individual components and their integrations, run with Vitest."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"End-to-End Tests"})," (",(0,i.jsx)(t.code,{children:"e2e/"}),"): Testing full runtime behavior of agents and plugins."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"component-tests",children:"Component Tests"}),"\n",(0,i.jsxs)(t.p,{children:["Component tests are written using Vitest and located in the ",(0,i.jsx)(t.code,{children:"__tests__/"})," directory:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Example component test (__tests__/plugin.test.ts)\nimport { describe, it, expect } from 'vitest';\nimport { myPlugin } from '../src';\n\ndescribe('Plugin Configuration', () => {\n  it('should have correct plugin metadata', () => {\n    expect(myPlugin.name).toBe('my-plugin');\n  });\n\n  it('should include required config variables', () => {\n    expect(myPlugin.config).toHaveProperty('API_KEY');\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"end-to-end-tests",children:"End-to-End Tests"}),"\n",(0,i.jsxs)(t.p,{children:["E2E tests verify runtime behavior and are located in the ",(0,i.jsx)(t.code,{children:"e2e/"})," directory:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Example e2e test (e2e/plugin.test.ts)\nexport class PluginTestSuite implements TestSuite {\n  name = 'plugin_test_suite';\n  tests = [\n    {\n      name: 'example_test',\n      fn: async (runtime) => {\n        // Test implementation\n        if (runtime.character.name !== 'Eliza') {\n          throw new Error('Expected character name to be \"Eliza\"');\n        }\n      },\n    },\n    {\n      name: 'should_have_action',\n      fn: async (runtime) => {\n        // Another test\n        const actionExists = plugin.actions.some((a) => a.name === 'EXAMPLE_ACTION');\n        if (!actionExists) {\n          throw new Error('Example action not found in plugin');\n        }\n      },\n    },\n  ],\n};\n\nexport default new PluginTestSuite();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(t.h3,{id:"basic-test-execution",children:"Basic Test Execution"}),"\n",(0,i.jsx)(t.p,{children:"Run all tests in the current project:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Navigate to your project\ncd my-agent-project\n\n# Run all tests (component and e2e)\nelizaos test\n\n# Run only component tests\nelizaos test component\n\n# Run only e2e tests\nelizaos test e2e\n"})}),"\n",(0,i.jsx)(t.h3,{id:"filtering-tests",children:"Filtering Tests"}),"\n",(0,i.jsx)(t.p,{children:"Filter tests by name:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# Run component tests with "auth" in the name or file path\nelizaos test component --name auth\n\n# Run e2e tests with "database" in the name\nelizaos test e2e --name database\n'})}),"\n",(0,i.jsx)(t.h3,{id:"skipping-build",children:"Skipping Build"}),"\n",(0,i.jsx)(t.p,{children:"To skip the build step when running tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run all tests without building first\nelizaos test --skip-build\n\n# Run component tests without building\nelizaos test component --skip-build\n"})}),"\n",(0,i.jsx)(t.h2,{id:"component-test-output",children:"Component Test Output"}),"\n",(0,i.jsx)(t.p,{children:"Component tests (powered by Vitest) produce output like:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:" PASS  __tests__/plugin.test.ts (4 tests)\n   Plugin Configuration\n     \u2713 should have correct plugin metadata\n     \u2713 should include required config variables\n   Plugin Service\n     \u2713 should start the service\n     \u2713 should handle required actions\n\n Test Files  1 passed (1)\n      Tests  4 passed (4)\n   Duration  1.45s\n"})}),"\n",(0,i.jsx)(t.h2,{id:"e2e-test-output",children:"E2E Test Output"}),"\n",(0,i.jsx)(t.p,{children:"E2E tests produce output showing test results:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Running test suite: plugin_test_suite\n  Running test: example_test\n  Running test: should_have_action\n\nTest Summary: 2 passed, 0 failed, 0 skipped\n"})}),"\n",(0,i.jsx)(t.h2,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,i.jsx)(t.h3,{id:"component-tests-1",children:"Component Tests"}),"\n",(0,i.jsx)(t.p,{children:"Component tests typically verify units and their integrations:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Example component test\nimport { describe, it, expect, beforeEach, vi } from 'vitest';\nimport { myPlugin } from '../src';\n\ndescribe('Service Registration', () => {\n  const mockRuntime = {\n    registerService: vi.fn(),\n  };\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('should register the service with runtime', async () => {\n    await myPlugin.init({ API_KEY: 'test-key' })(mockRuntime);\n    expect(mockRuntime.registerService).toHaveBeenCalledWith(\n      'my-service',\n      expect.objectContaining({\n        start: expect.any(Function),\n        stop: expect.any(Function),\n      })\n    );\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"e2e-tests",children:"E2E Tests"}),"\n",(0,i.jsx)(t.p,{children:"E2E tests verify the functionality in a real runtime environment:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Example e2e test\nexport default {\n  name: 'database_tests',\n  tests: [\n    {\n      name: 'data_persistence',\n      fn: async (runtime) => {\n        // Test implementation\n        const service = runtime.getService('database');\n\n        // Create data\n        await service.insert('test', { key: 'value' });\n\n        // Verify retrieval\n        const result = await service.get('test');\n        if (result.key !== 'value') {\n          throw new Error('Data not persisted correctly');\n        }\n      },\n    },\n  ],\n};\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-hooks-for-e2e-tests",children:"Test Hooks for E2E Tests"}),"\n",(0,i.jsx)(t.p,{children:"ElizaOS e2e tests support hooks for setup and teardown:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"export default {\n  name: 'database_tests',\n  beforeAll: async (runtime) => {\n    // Setup test database\n    await runtime.db.migrate();\n  },\n  afterAll: async (runtime) => {\n    // Clean up test database\n    await runtime.db.clean();\n  },\n  beforeEach: async (runtime, test) => {\n    // Setup before each test\n    console.log(`Running test: ${test.name}`);\n  },\n  afterEach: async (runtime, test) => {\n    // Cleanup after each test\n  },\n  tests: [\n    // Test cases\n  ],\n};\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-utilities",children:"Test Utilities"}),"\n",(0,i.jsx)(t.p,{children:"ElizaOS provides test utilities to simplify writing tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Using test utilities for component tests\nimport { createMockRuntime, createMockService } from './test-utils';\n\ndescribe('Plugin Integration', () => {\n  it('should interact with other services', async () => {\n    const mockDatabaseService = createMockService('database');\n    const mockRuntime = createMockRuntime({\n      services: {\n        database: mockDatabaseService,\n      },\n    });\n\n    // Test implementation\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.h3,{id:"testing-a-complete-project",children:"Testing a Complete Project"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run all tests\nelizaos test\n\n# Run with specific options\nelizaos test --port 4000 --skip-build\n"})}),"\n",(0,i.jsx)(t.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run tests in CI environment\nelizaos test\n"})}),"\n",(0,i.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(t.h3,{id:"component-tests-not-found",children:"Component Tests Not Found"}),"\n",(0,i.jsx)(t.p,{children:"If component tests aren't being discovered:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Check your file naming pattern\n# Files should be in __tests__/ directory with .test.ts extension\n\n# Try running with more specific name filter\nelizaos test component --name specificTestName\n"})}),"\n",(0,i.jsx)(t.h3,{id:"e2e-tests-failing-due-to-port-conflicts",children:"E2E Tests Failing Due to Port Conflicts"}),"\n",(0,i.jsx)(t.p,{children:"If e2e tests fail due to port conflicts:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Specify a different port\nelizaos test e2e --port 4000\n"})}),"\n",(0,i.jsx)(t.h3,{id:"typescript-errors",children:"TypeScript Errors"}),"\n",(0,i.jsx)(t.p,{children:"If TypeScript compilation is failing:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Build the project first\nelizaos project build\n\n# Then run tests with skip-build\nelizaos test --skip-build\n"})}),"\n",(0,i.jsx)(t.h2,{id:"related-commands",children:"Related Commands"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/cli/dev",children:(0,i.jsx)(t.code,{children:"dev"})}),": Run your project in development mode"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/cli/start",children:(0,i.jsx)(t.code,{children:"start"})}),": Start your project in production mode"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},71184:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var s=n(14041);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);